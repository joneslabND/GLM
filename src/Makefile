###############################################################################
#                                                                             #
# Makefile for glm                                                            #
#                                                                             #
#  Part of GLM (General Lake Model)                                           #
#                                                                             #
#  Developed by :                                                             #
#      AquaticEcoDynamics (AED) Group                                         #
#      School of Earth & Environment                                          #
#      The University of Western Australia                                    #
#                                                                             #
#      http://aed.see.uwa.edu.au/                                             #
#                                                                             #
#  Copyright 2013 - 2016 -  The University of Western Australia               #
#                                                                             #
#   GLM is free software: you can redistribute it and/or modify               #
#   it under the terms of the GNU General Public License as published by      #
#   the Free Software Foundation, either version 3 of the License, or         #
#   (at your option) any later version.                                       #
#                                                                             #
#   GLM is distributed in the hope that it will be useful,                    #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#   GNU General Public License for more details.                              #
#                                                                             #
#   You should have received a copy of the GNU General Public License         #
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

OSTYPE=$(shell uname -s)

ifeq ($(WITH_PLOTS),)
  WITH_PLOTS=true
  ifeq ($(WITH_XPLOTS),)
    WITH_XPLOTS=true
  endif
  ifeq ($(PLOTDIR),)
    PLOTDIR=../../libplot
  endif
endif

ifeq ($(UTILDIR),)
  UTILDIR=../../libutil
endif

TARGETS=glm
DEFINES=
FINCLUDES=-I$(UTILDIR)/include
CINCLUDES=-I$(UTILDIR)/include
LIBS=-L$(UTILDIR)/lib -lutil
GLM_DEPS=$(UTILDIR)/lib/libutil.a
ifeq ($(WITH_PLOTS),true)
  DEFINES+=-DPLOTS
  ifeq ($(WITH_XPLOTS),true)
    DEFINES+=-DXPLOTS
  endif
  GLM_DEPS+=$(PLOTDIR)/lib/libplot.a
  CINCLUDES+=-I$(PLOTDIR)/include
endif

ifeq ($(OSTYPE),Darwin)
  ifeq ($(HOMEBREW),true)
     FINCLUDES+=-I/usr/local/include
     CINCLUDES+=-I/usr/local/include
     LIBS+=-L/usr/local/lib
  else
     FINCLUDES+=-I/opt/local/include
     CINCLUDES+=-I/opt/local/include
     LIBS+=-L/opt/local/lib
  endif
  #EXTRALINKFLAGS=-Wl,-no_compact_unwind
  EXTRALINKFLAGS=-Wl,-no_compact_unwind,-headerpad_max_install_names
else
  EXTRALINKFLAGS=-Wl,--export-dynamic
endif

ifeq ($(FORTRAN_COMPILER),IFORT11)
  F90=ifort
endif
ifeq ($(FORTRAN_COMPILER),IFORT12)
  F90=ifort
endif
ifeq ($(FORTRAN_COMPILER),)
  FORTRAN_COMPILER=GFORTRAN
endif
ifeq ($(COMPILATION_MODE),)
  COMPILATION_MODE=production
endif

ifeq ($(FABM),true)
  ifeq ($(FABMDIR),)
    FABMDIR=../../fabm-git
  endif
  DEFINES+=-DFABM

  ifeq ($(FABM_OLD_BUILD),true)
    ifeq ($(COMPILATION_MODE),production)
      FABMLIB=fabm_prod
      WITH_CHECKS=false
    endif
    ifeq ($(COMPILATION_MODE),debug)
      FABMLIB=fabm_debug
      WITH_CHECKS=true
    endif

    FINCLUDES+=-I$(FABMDIR)/include -I$(FABMDIR)/src/drivers/glm -I$(FABMDIR)/modules/glm/$(FORTRAN_COMPILER)
    FABMLIBS=-L$(FABMDIR)/lib/glm/$(FORTRAN_COMPILER) -l$(FABMLIB)
  else
    ifeq ($(COMPILATION_MODE),production)
      FABMLIB=fabm
      WITH_CHECKS=false
    endif
    ifeq ($(COMPILATION_MODE),debug)
      FABMLIB=fabm_debug
      WITH_CHECKS=true
    endif

    FINCLUDES+=-I$(FABMDIR)/include -I$(FABMDIR)/src/drivers/glm -I$(FABMDIR)/build/modules
    FABMLIBS=-L$(FABMDIR)/build -l$(FABMLIB)
  endif

  ifeq ($(USE_DL),true)
    FABMTARGETS=libglm_wq_fabm.so
  endif
endif

ifeq ($(AED2),true)
  DEFINES+=-DAED2

  ifeq ($(AED2DIR),)
    AED2DIR=../../libaed2
  endif

  FINCLUDES+=-I$(AED2DIR)/include -I$(AED2DIR)/mod
  AED2LIBS=-L$(AED2DIR)/lib -laed2

  ifeq ($(USE_DL),true)
    AED2TARGETS=libglm_wq_aed2.so
  endif
endif

ifneq ($(USE_DL),true)
  LIBS+=$(AED2LIBS) $(FABMLIBS)
endif


# Select specific compiler bits
ifeq ($(F90),ifort)
  FINCLUDES+=-I/opt/intel/include
  DEBUG_FFLAGS=-g -traceback
  OPT_FFLAGS=-O3
  FFLAGS=-warn all -i-static -mp1 -stand f03 $(DEFINES) $(FINCLUDES)
  ifeq ($(WITH_CHECKS),true)
    FFLAGS+=-check
  endif
  FFLAGS+=-real-size 64
  LIBS+=-L/opt/intel/lib
  LIBS+=-lifcore -lsvml
  LIBS+=-limf -lintlc
else
  F90=gfortran
  FINCLUDES+=-I/usr/include
  DEBUG_FFLAGS=-g -fbacktrace
  OPT_FFLAGS=-O3
  FFLAGS=-Wall -Wno-c-binding-type -ffree-line-length-none -std=f2008 $(DEFINES) $(FINCLUDES) -fall-intrinsics
  ifeq ($(WITH_CHECKS),true)
    FFLAGS+=-fcheck=all
  endif
  FFLAGS+=-fdefault-real-8 -fdefault-double-8
  ifeq ($(OSTYPE),Darwin)
    LIBS+=-L/usr/local/gfortran/lib
  endif
  LIBS+=-lgfortran
endif

ifeq ($(DEBUG),true)
  DEBUG_CFLAGS=-g -fbounds-check
  OPT_CFLAGS=
  OPT_FFLAGS=
else
  DEBUG_FFLAGS=
  DEBUG_CFLAGS=
  # OPT_CFLAGS=-O4 -Ofast -frounding-math
  OPT_CFLAGS=-O3
  # OPT_CFLAGS=
  # OPT_FFLAGS=
endif

LIBS+=-lnetcdf
# If variable NETCDFLIB is not empty, use it to
# set path to the library
ifneq ($(NETCDFLIB),)
  LIBS+=-L$(NETCDFLIB)
endif


ifeq ($(PLOTDIR),)
  PLOTDIR=../../libplot
endif

ifeq ($(WITH_PLOTS),true)
  LIBS+=-L$(PLOTDIR)/lib -lplot -lgd -lpng -ljpeg -lm
  ifeq ($(WITH_XPLOTS),true)
    ifeq ($(OSTYPE),Darwin)
      LIBS+=-framework Cocoa
    else
      LIBS+=-lX11
    endif
  endif
endif
#LIBS+=-lefence

CFLAGS=-Wall -I$(UTILDIR) -I$(PLOTDIR) $(CINCLUDES) $(DEFINES) $(DEBUG_CFLAGS) $(OPT_CFLAGS)
FFLAGS+=$(DEBUG_FFLAGS) $(OPT_FFLAGS)

OBJS=glm_globals.o \
     glm_util.o \
     glm_csv.o \
     glm_mobl.o \
     glm_mixu.o \
     glm_wqual.o \
     glm_layers.o \
     glm_surface.o \
     glm_input.o \
     glm_plot.o \
     glm_output.o \
     glm_ncdf.o \
     glm_lnum.o \
     glm_init.o \
     glm_flow.o \
     glm_mixer.o \
     glm_deep.o \
     glm_bubbler.o \
     glm_stress.o \
     glm_bird.o \
     glm_model.o \
     glm_types.o \
     glm_const.o \
     glm_main.o

ifeq ($(USE_DL),true)
  LIBS+=-ldl
  CFLAGS+=-DUSE_DL_LOADER=1
  FFLAGS+=-DUSE_DL_LOADER=1
  TARGETS+=$(AED2TARGETS) $(FABMTARGETS)
else
  OBJS+=glm_zones.o
  ifeq ($(AED2),true)
    OBJS+=glm_aed2.o
  endif
  ifeq ($(FABM),true)
    OBJS+=glm_fabm.o ode_solvers.o
  endif
endif


all: $(TARGETS)


glm: $(OBJS) $(GLM_DEPS)
	$(CC) -o glm $(EXTRALINKFLAGS) $(OBJS) $(LIBS)

clean:
	@touch 1.o 1.mod 1.t 1__genmod.f90 glm 1.so glm_test_bird
	@/bin/rm *.mod *.o *.t *__genmod.f90 glm *.so glm_test_bird
	@echo Made clean

distclean: clean

%.o: %.F90 glm.h
	$(F90) -fPIC $(FFLAGS) $(EXTRA_FFLAGS) -D_FORTRAN_SOURCE_ -c $< -o $@

%.o: %.c glm.h
	$(CC) -fPIC $(CFLAGS) $(EXTRA_FLAGS) -D_C_VERSION_ -c $< -o $@

%.so:
	$(LD) -shared $(LDFLAGS) \
                        -o $@ $^ -L/opt/intel/lib/intel64/ $(LIBS)

#                        -E -Bdynamic -undefined suppress -o $@ $^ -L/opt/intel/lib/intel64/ $(LIBS)

# Build rules

libglm_wq_aed2.so: glm_aed2.o glm_plugin.o
	$(LD) -shared $(LDFLAGS) \
                        -o $@ $^ -L/opt/intel/lib/intel64/ $(LIBS) $(AED2LIBS)

libglm_wq_fabm.so: glm_fabm.o ode_solvers.o glm_plugin.o
	$(LD) -shared $(LDFLAGS) \
                        -o $@ $^ -L/opt/intel/lib/intel64/ $(LIBS) $(FABMLIBS)

# special needs dependancies

glm_aed2.o: glm_aed2.F90 glm_types.o
glm_fabm.o: glm_fabm.F90 glm_types.o ode_solvers.o
glm_types.o: glm_types.F90 glm.h
ode_solvers.o: ode_solvers.F90

glm_globals.o: glm_globals.c glm_globals.h glm.h
glm_bubbler.o: glm_bubbler.c glm_globals.h glm.h
glm_plugin.o: glm_plugin.c glm_plugin.h glm.h

